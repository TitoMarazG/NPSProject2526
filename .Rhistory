setwd("~/uni/2025-2026/non param/progetto/param/progetto/NPSProject2526/data")
setwd("~/uni/2025-2026/non param/progetto/param/progetto/NPSProject2526")
setwd("~/uni/2025-2026/non param/progetto/param/progetto/NPSProject2526")
rm(list = ls())
graphics.off()
# Data cleaning
data_expediture = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
View(data_expediture)
data_expediture <- data_expediture[, 11:14]
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
View(data_expediture)
View(data_expediture_0)
# Data exploration
head(data_expediture_1)
# column selection
data_expediture_1 <- data_expediture[, 11:14]
# Data exploration
head(data_expediture_1)
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
# column selection
data_expediture_1 <- data_expediture[, 11:14]
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
# Data exploration
head(data_expediture_1)
rm(list = ls())
graphics.off()
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
# Data exploration
head(data_expediture_1)
dim(data_expediture_1)
table(data_expediture_1$Geopolitical.entity..reporting.)
summary(data_expediture_1)
View(data_expediture_0)
View(data_expediture_0)
#selection of rows of total expediture
data_expediture_0 <- data_expediture_0[data_expediture_0$Main.expenditure.type == "Total", ]
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
View(data_expediture_1)
View(data_expediture_1)
data_expediture_1 <- data_expediture_1[, -3]
# Data exploration
head(data_expediture_1)
dim(data_expediture_1)
table(data_expediture_1$Geopolitical.entity..reporting.)
summary(data_expediture_1)
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
# Data exploration
head(data_expediture_1)
dim(data_expediture_1)
table(data_expediture_1$Geopolitical.entity..reporting.)
summary(data_expediture_1)
library(tidyr)
library(dplyr) # Utile per la manipolazione generale
# Supponiamo che il tuo dataset si chiami 'dati_originali'
data_expediture_1 <- data_expediture_1 %>%
pivot_wider(
# La colonna che identifica le righe nel nuovo dataset
id_cols = Geopolitical.entity..reporting.,
# La colonna i cui valori (es. 2020, 2021) diventeranno i nomi delle nuove colonne
names_from = TIME_PERIOD,
# La colonna i cui valori (es. 3.4, 5.1) riempiranno le nuove colonne
values_from = OBS_VALUE
)
View(data_expediture_1)
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
View(data_expediture_1)
View(data_expediture_0)
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
View(data_expediture_0)
#selection of rows of total expediture
unique(data_expediture_0$Main.expenditure.type)
#selection of rows of total expediture
unique(data_expediture_0$spdeps)
unique(data_expediture_0$Main.expenditure.type)
data_expediture_0 <- data_expediture_0[data_expediture_0$Main.expenditure.type == "Social protection benefits", ]
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
library(tidyr)
library(dplyr) # Utile per la manipolazione generale
# Supponiamo che il tuo dataset si chiami 'dati_originali'
data_expediture_1 <- data_expediture_1 %>%
pivot_wider(
# La colonna che identifica le righe nel nuovo dataset
id_cols = Geopolitical.entity..reporting.,
# La colonna i cui valori (es. 2020, 2021) diventeranno i nomi delle nuove colonne
names_from = TIME_PERIOD,
# La colonna i cui valori (es. 3.4, 5.1) riempiranno le nuove colonne
values_from = OBS_VALUE
)
View(data_expediture_1)
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
View(data_expediture_1)
unique(data_expediture_0$Unit.of.measure)
#selection of rows of Social protection benefits
unique(data_expediture_0$Main.expenditure.type)
data_expediture_0 <- data_expediture_0[data_expediture_0$Main.expenditure.type == "Social protection benefits", ]
unique(data_expediture_0$Unit.of.measure)
data_expediture_0 <- data_expediture_0[data_expediture_0$Unit.of.measure == "Euro per inhabitant (at constant 2015 prices)", ]
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
library(tidyr)
library(dplyr) # Utile per la manipolazione generale
# Supponiamo che il tuo dataset si chiami 'dati_originali'
data_expediture_1 <- data_expediture_1 %>%
pivot_wider(
# La colonna che identifica le righe nel nuovo dataset
id_cols = Geopolitical.entity..reporting.,
# La colonna i cui valori (es. 2020, 2021) diventeranno i nomi delle nuove colonne
names_from = TIME_PERIOD,
# La colonna i cui valori (es. 3.4, 5.1) riempiranno le nuove colonne
values_from = OBS_VALUE
)
# Visualizza l'inizio del nuovo dataset
head(data_expediture_1)
# Data exploration
head(data_expediture_1)
dim(data_expediture_1)
table(data_expediture_1$Geopolitical.entity..reporting.)
summary(data_expediture_1)
View(data_expediture_1)
# Data cleaning
poverty_rate = read.csv(file = "data/povertyRate.csv", header = T)
poverty_rate = poverty_rate[,-(1:14)]
poverty_rate = poverty_rate[1:4]
poverty_rate = poverty_rate[,-3]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
# Data exploration
head(poverty_rate)
dim(poverty_rate)
table(poverty_rate$Geopolitical.entity..reporting.)
View(poverty_rate)
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
plot(data_expediture_1$TIME_PERIOD, data_expediture_1$OBS_VALUE)
# install.packages("ggplot2")
# install.packages("viridis") # Per la palette
library(ggplot2)
library(viridis)
paese <- data_expediture_1$Geopolitical.entity..reporting.
ggplot(data = data_expediture_1,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) +  # <- Linee Grosse (linewidth > 1)
scale_color_viridis(discrete = TRUE, option = "D") + # <- Palette Variata
geom_point(size = 3) + # Punti più grandi per abbinare le linee
labs(
title = "Tasso di Povertà per Paese nel Tempo",
x = "Periodo di Tempo",
y = "Tasso di Povertà"
)
library(dplyr)
# Definisci i paesi da includere
paesi_selezionati <- c("France", "Italy", "Germany", "Bulgaria", "Poland")
data_subsample <- data_expediture_1 %>%
# PASSO 1: Filtra il dataframe
filter( data_expediture_1$Geopolitical.entity..reporting. %in% paesi_selezionati)
paese <- data_subsample$Geopolitical.entity..reporting.
# PASSO 2: Crea il grafico con i dati filtrati
ggplot( data = data_subsample,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) + # Linee grosse
geom_point(size = 3) +
scale_color_viridis(discrete = TRUE, option = "D") +
labs(
title = "Social Protection Benefits:",
x = "Periodo di Tempo",
y = "Social Protection Benefits"
)
dataset_merged <- left_join(
x = data_expediture_1,      # Il dataset principale (left/sinistro)
y = read.csv(file = "data/povertyRate.csv", header = T),  # Il dataset da cui prendere le nuove colonne (right/destro)
# Specifica le colonne (chiavi) su cui basare l'unione
by = c("Geopolitical.entity..reporting.", "TIME_PERIOD")
)
head(dataset_merged)
View(dataset_merged)
View(dataset_merged)
write.csv(
x = poverty_rate,                 # Il data frame che vuoi salvare
file = "poverty_rate.csv",  # Il percorso e il nome del file di output
row.names = FALSE               # Opzionale, ma altamente consigliato
)
write.csv(
x = poverty_rate,                 # Il data frame che vuoi salvare
file = "data/poverty_rate.csv",  # Il percorso e il nome del file di output
row.names = FALSE               # Opzionale, ma altamente consigliato
)
plot(poverty_rate$TIME_PERIOD, poverty_rate$OBS_VALUE)
write.csv(
x = poverty_rate,                 # Il data frame che vuoi salvare
file = "data/poverty_rate_cleaned.csv",  # Il percorso e il nome del file di output
row.names = FALSE               # Opzionale, ma altamente consigliato
)
library(dplyr)
dataset_merged <- left_join(
x = data_expediture_1,      # Il dataset principale (left/sinistro)
y = read.csv(file = "data/poverty_rate_cleaned.csv", header = T),  # Il dataset da cui prendere le nuove colonne (right/destro)
# Specifica le colonne (chiavi) su cui basare l'unione
by = c("Geopolitical.entity..reporting.", "TIME_PERIOD")
)
View(dataset_merged)
View(data_expediture_1)
View(data_expediture_1)
# Trova la colonna con il vecchio nome e assegnale il nuovo nome
names(data_expediture_1)[names(data_expediture_1) == "OBS_VALUE"] <- "SOCIAL_EXP"
poverty_rate <- read.csv(file = "data/poverty_rate_cleaned.csv", header = T)
names(poverty_rate)[names(poverty_rate) == "OBS_VALUE"] <- "POVERTY_RATE"
# Il dataset 'dati' viene modificato direttamente in questo caso
dataset_merged <- left_join(
x = data_expediture_1,      # Il dataset principale (left/sinistro)
y = poverty_rate,  # Il dataset da cui prendere le nuove colonne (right/destro)
# Specifica le colonne (chiavi) su cui basare l'unione
by = c("Geopolitical.entity..reporting.", "TIME_PERIOD")
)
head(dataset_merged)
write.csv(
x = dataset_merged,                 # Il data frame che vuoi salvare
file = "data/dataset_merged.csv",  # Il percorso e il nome del file di output
row.names = FALSE               # Opzionale, ma altamente consigliato
)
rm(list = ls())
graphics.off()
# Data cleaning
poverty_rate = read.csv(file = "data/povertyRate.csv", header = T)
poverty_rate = poverty_rate[,-(1:14)]
poverty_rate = poverty_rate[1:4]
poverty_rate = poverty_rate[,-3]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
# Data exploration
head(poverty_rate)
dim(poverty_rate)
table(poverty_rate$Geopolitical.entity..reporting.)
summary(poverty_rate)
nCountries = length(unique(poverty_rate$Geopolitical.entity..reporting.))
plot(poverty_rate$TIME_PERIOD, poverty_rate$OBS_VALUE)
# install.packages("ggplot2")
# install.packages("viridis") # Per la palette
library(ggplot2)
library(viridis)
paese <- poverty_rate$Geopolitical.entity..reporting.
ggplot(data = poverty_rate,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) +  # <- Linee Grosse (linewidth > 1)
scale_color_viridis(discrete = TRUE, option = "D") + # <- Palette Variata
geom_point(size = 3) + # Punti più grandi per abbinare le linee
labs(
title = "Tasso di Povertà per Paese nel Tempo",
x = "Periodo di Tempo",
y = "Tasso di Povertà"
)
library(dplyr)
# Definisci i paesi da includere
paesi_selezionati <- c("France", "Italy", "Germany", "Bulgaria", "Poland")
data_subsample <- poverty_rate %>%
# PASSO 1: Filtra il dataframe
filter( poverty_rate$Geopolitical.entity..reporting. %in% paesi_selezionati)
paese <- data_subsample$Geopolitical.entity..reporting.
# PASSO 2: Crea il grafico con i dati filtrati
ggplot( data = data_subsample,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) + # Linee grosse
geom_point(size = 3) +
scale_color_viridis(discrete = TRUE, option = "D") +
labs(
title = "Tassi di Povertà:",
x = "Periodo di Tempo",
y = "Tasso di Povertà"
)
rm(list = ls())
graphics.off()
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
head(data_expediture_0)
dim(data_expediture_0)
View(data_expediture_0)
#selection of rows of Social protection benefits
unique(data_expediture_0$Main.expenditure.type)
data_expediture_0 <- data_expediture_0[data_expediture_0$Main.expenditure.type == "Social protection benefits", ]
unique(data_expediture_0$Unit.of.measure)
data_expediture_0 <- data_expediture_0[data_expediture_0$Unit.of.measure == "Euro per inhabitant (at constant 2015 prices)", ]
# column selection
data_expediture_1 <- data_expediture_0[, 11:14]
data_expediture_1 <- data_expediture_1[, -3]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
data_expediture_1 = data_expediture_1[data_expediture_1$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
# Data exploration
head(data_expediture_1)
dim(data_expediture_1)
table(data_expediture_1$Geopolitical.entity..reporting.)
summary(data_expediture_1)
plot(data_expediture_1$TIME_PERIOD, data_expediture_1$OBS_VALUE)
# install.packages("ggplot2")
# install.packages("viridis") # Per la palette
library(ggplot2)
library(viridis)
paese <- data_expediture_1$Geopolitical.entity..reporting.
ggplot(data = data_expediture_1,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) +  # <- Linee Grosse (linewidth > 1)
scale_color_viridis(discrete = TRUE, option = "D") + # <- Palette Variata
geom_point(size = 3) + # Punti più grandi per abbinare le linee
labs(
title = "Social Protection Benefits per Paese nel Tempo",
x = "Periodo di Tempo",
y = "Social Protection Benefits"
)
library(dplyr)
# Definisci i paesi da includere
paesi_selezionati <- c("France", "Italy", "Germany", "Bulgaria", "Poland")
data_subsample <- data_expediture_1 %>%
# PASSO 1: Filtra il dataframe
filter( data_expediture_1$Geopolitical.entity..reporting. %in% paesi_selezionati)
paese <- data_subsample$Geopolitical.entity..reporting.
# PASSO 2: Crea il grafico con i dati filtrati
ggplot( data = data_subsample,
aes(x = TIME_PERIOD, y = OBS_VALUE, color = paese, group = paese)) +
geom_line(linewidth = 1.5) + # Linee grosse
geom_point(size = 3) +
scale_color_viridis(discrete = TRUE, option = "D") +
labs(
title = "Social Protection Benefits:",
x = "Periodo di Tempo",
y = "Social Protection Benefits"
)
library(dplyr)
# Trova la colonna con il vecchio nome e assegnale il nuovo nome
names(data_expediture_1)[names(data_expediture_1) == "OBS_VALUE"] <- "SOCIAL_EXP"
poverty_rate <- read.csv(file = "data/poverty_rate_cleaned.csv", header = T)
names(poverty_rate)[names(poverty_rate) == "OBS_VALUE"] <- "POVERTY_RATE"
# Il dataset 'dati' viene modificato direttamente in questo caso
dataset_merged <- left_join(
x = data_expediture_1,      # Il dataset principale (left/sinistro)
y = poverty_rate,  # Il dataset da cui prendere le nuove colonne (right/destro)
# Specifica le colonne (chiavi) su cui basare l'unione
by = c("Geopolitical.entity..reporting.", "TIME_PERIOD")
)
head(dataset_merged)
data_expenditure_fct = read.csv("data/spr_exp_ftm__custom_18697146_linear.csv", header = T)
View(data_expenditure_fct)
table(data_expenditure_fct$spfunc)
table(data_expenditure_fct$unit)
table(data_expenditure_fct$spdepm
)
table(data_expenditure_fct$spdep)
rm(list = ls())
graphics.off()
# Data cleaning - poverty_rate
spr_expenditures = read.csv("data/spr_exp_ftm__custom_18697146_linear.csv", header = T)
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
# Data cleaning - poverty_rate
spr_expenditures = read.csv("data/spr_exp_ftm__custom_18697146_linear.csv", header = T)
spr_expenditures = spr_expenditures[spr_expenditures$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
# Data cleaning - poverty_rate
spr_expenditures = read.csv("data/spr_exp_ftm__custom_18697146_linear.csv", header = T)
table(spr_expenditures$geo)
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area – 20 countries (from 2023)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area - 19 countries  (2015-2022)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 27 countries (2007-2013)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 27 countries (from 2020)",]
spr_expenditures = spr_expenditures[poverty_rate$geo != "European Union - 28 countries (2013-2020)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 28 countries (2013-2020)",]
# Data cleaning - poverty_rate
spr_expenditures = read.csv("data/spr_exp_ftm__custom_18697146_linear.csv", header = T)
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area – 20 countries (from 2023)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area - 19 countries  (2015-2022)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 27 countries (2007-2013)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 27 countries (from 2020)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 28 countries (2013-2020)",]
table(spr_expenditures$geo)
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area - 12 countries (2001-2006)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "Euro area - 18 countries (2014)",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Economic Area except Liechtenstein",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Free Trade Association except Liechtenstein",]
spr_expenditures = spr_expenditures[spr_expenditures$geo != "European Union - 15 countries (1995-2004)",]
table(spr_expenditures$geo)
nCountries = length(unique(poverty_rate$Geopolitical.entity..reporting.))
poverty_rate = read.csv(file = "data/povertyRate.csv", header = T)
poverty_rate = poverty_rate[,-(1:14)]
poverty_rate = poverty_rate[1:4]
poverty_rate = poverty_rate[,-3]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area – 20 countries (from 2023)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "Euro area - 19 countries  (2015-2022)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (2007-2013)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 27 countries (from 2020)",]
poverty_rate = poverty_rate[poverty_rate$Geopolitical.entity..reporting. != "European Union - 28 countries (2013-2020)",]
nCountries = length(unique(poverty_rate$Geopolitical.entity..reporting.))
nCountries = length(unique(spr_expenditures$geo))
table(spr_expenditures$geo)
table(poverty_rate$Geopolitical.entity..reporting.)
table(spr_expenditures[spr_expenditures$geo == "Bosnia and Herzegovina",]$TIME_PERIOD)
summary(spr_expenditures)
# Data cleaning
data_expediture_0 = read.csv(file = "data/spr_exp_type$defaultview_linear_2_0.csv", header = T)
View(data_expediture_0)
table(data_expediture_0$spdeps)
table(data_expediture_0$unit)
View(poverty_rate)
# Data cleaning - poverty_rate
poverty_rate = read.csv(file = "data/povertyRate.csv", header = T)
